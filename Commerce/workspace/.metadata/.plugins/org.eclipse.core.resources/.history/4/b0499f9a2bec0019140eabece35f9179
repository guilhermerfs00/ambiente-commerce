package br.gov.mg.bdmg.controller;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;
import java.util.stream.Collectors;

import javax.ejb.EJB;
import javax.ejb.EJBTransactionRolledbackException;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.inject.Inject;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.SecurityContext;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang3.StringEscapeUtils;
import org.wildfly.security.manager.action.GetProtectionDomainAction;

import br.gov.mg.bdmg.commons.models.bdseg.AnexoEmailSistema;
import br.gov.mg.bdmg.commons.models.enums.SimNaoEnum;
import br.gov.mg.bdmg.commons.resources.ResponseResource;
import br.gov.mg.bdmg.commons.services.EmailService;
import br.gov.mg.bdmg.commons.services.ejbs.clients.bdaudit.ConstanteSistemaService;
import br.gov.mg.bdmg.commons.services.ejbs.clients.bdweb.MensagemSistemaService;
import br.gov.mg.bdmg.commons.services.ejbs.clients.consultaexterna.JucemgSerasaService;
import br.gov.mg.bdmg.commons.services.ejbs.clients.files.FileService;
import br.gov.mg.bdmg.commons.services.ejbs.clients.files.dtos.FileIn;
import br.gov.mg.bdmg.commons.services.ejbs.clients.files.dtos.FileOut;
import br.gov.mg.bdmg.commons.services.ejbs.clients.files.exceptions.FileServiceException;
import br.gov.mg.bdmg.commons.services.ejbs.exceptions.NaoEncontradaJucemgSerasaException;
import br.gov.mg.bdmg.commons.services.emails.builder.EmailSistemaBuilder;
import br.gov.mg.bdmg.commons.services.emails.enumeracoes.EmailPreDefinido;
import br.gov.mg.bdmg.commons.services.exceptions.PessoaJuridicaNaoEncontradaException;
import br.gov.mg.bdmg.commons.services.to.PessoaJuridicaJucemgTO;
import br.gov.mg.bdmg.commons.services.to.PessoaJuridicaSerasaTO;
import br.gov.mg.bdmg.commons.services.to.SocioAdminJucemgTO;
import br.gov.mg.bdmg.commons.utils.CNPJUtils;
import br.gov.mg.bdmg.commons.utils.EmailUtils;
import br.gov.mg.bdmg.commons.utils.MoedaUtils;
import br.gov.mg.bdmg.commons.utils.NumerosUtils;
import br.gov.mg.bdmg.commons.utils.StringUtil;
import br.gov.mg.bdmg.commons.utils.builder.MessageBuilder;
import br.gov.mg.bdmg.commons.utils.calculofinanceiro.TaxaJuros;
import br.gov.mg.bdmg.commons.utils.tempo.Frequencias;
import br.gov.mg.bdmg.exception.SemProdutoEnquadradoException;
import br.gov.mg.bdmg.fileutil.client.FileUtilService;
import br.gov.mg.bdmg.resources.BuscarLimiteResource;
import br.gov.mg.bdmg.resources.ComplementoEnquadramento;
import br.gov.mg.bdmg.resources.CorrespondentesProximos;
import br.gov.mg.bdmg.resources.LimiteProponenteResource;
import br.gov.mg.bdmg.resources.PlanoPorPrazoResource;
import br.gov.mg.bdmg.resources.PlanoResource;
import br.gov.mg.bdmg.resources.request.EnviarEmailRequest;
import br.gov.mg.bdmg.resources.request.ExecutarSimulacaoRequest;
import br.gov.mg.bdmg.service.EnquadramentoProdutoService;
import br.gov.mg.bdmg.service.ImpedimentoService;
import br.gov.mg.bdmg.service.LimiteService;
import br.gov.mg.bdmg.service.MotivoCreditoService;
import br.gov.mg.bdmg.service.SimulacaoFinanciamentoService;
import br.gov.mg.bdmg.service.SolicitacaoFinanciamentoService;
import br.gov.mg.bdmg.service.TaxasService;
import br.gov.mg.bdmg.to.MotivoCreditoTo;
import br.gov.mg.bdmg.to.ProdutoEnquadradoTO;
import br.gov.mg.bdmg.to.SimulacaoFinanciamentoTO;
import br.gov.mg.bdmg.to.SolicitacaoFinanciamentoTo;
import br.gov.mg.bdmg.util.Constantes;
import br.gov.mg.bdmg.util.Recaptcha;
import gov.bdmg.cadastro.endereco.service.EnderecoService;
import gov.bdmg.cadastro.endereco.service.Municipio;
import gov.bdmg.cadastro.endereco.service.UnidadeFederativa;
import gov.bdmg.cadastro.log.service.ConsultaSqlServiceException_Exception;
import gov.bdmg.cadastro.log.service.LogService;
import gov.bdmg.proposta.enums.SituacaoPropostaEnum;
import gov.bdmg.proposta.exception.BdmgBaseNegocioException;
import gov.bdmg.proposta.exception.ImpedimentoGerarProponenteException;
import gov.bdmg.proposta.service.CondicaoService;
import gov.bdmg.proposta.service.EntidadeConveniadaService;
import gov.bdmg.proposta.service.MensagemService;
import gov.bdmg.proposta.service.PessoaJuridicaPropostaService;
import gov.bdmg.proposta.service.ProcessamentoService;
import gov.bdmg.proposta.service.PropostaService;
import gov.bdmg.proposta.service.RelacaoCorrespondenteProponenteService;
import gov.bdmg.proposta.to.CondicaoTo;
import gov.bdmg.proposta.to.PessoaJuridicaPropostaTo;
import gov.bdmg.proposta.to.ProdutoMidiaTo;
import gov.bdmg.proposta.to.PropostaTo;
import gov.bdmg.seguranca.autenticacao.filter.PrincipalDigital;
import gov.bdmg.seguranca.autenticacao.filter.Secured;
import gov.bdmg.seguranca.autenticacao.service.AutenticacaoService;
import gov.bdmg.seguranca.autenticacao.to.DominioJson;
import gov.bdmg.seguranca.autenticacao.to.UsuarioJson;

@Stateless
@Path("/simulacao-financiamento")
public class SimulacaoFinanciamentoController {

	@EJB(lookup = SolicitacaoFinanciamentoService.LOOKUP)
	private SolicitacaoFinanciamentoService solicitacaoFinanciamentoService;

	@EJB(lookup = PropostaService.LOOKUP)
	private PropostaService propostaService;

	@EJB(lookup = CondicaoService.LOOKUP)
	private CondicaoService condicaoService;

	@EJB(lookup = ProcessamentoService.LOOKUP)
	private ProcessamentoService processamentoService;

	@EJB(lookup = ImpedimentoService.LOOKUP)
	private ImpedimentoService impedimentoService;

	@EJB(lookup = SimulacaoFinanciamentoService.LOOKUP)
	private SimulacaoFinanciamentoService simulacaoFinanciamentoService;

	@EJB(lookup = MotivoCreditoService.LOOKUP)
	private MotivoCreditoService motivoCreditoService;

	@EJB(lookup = PessoaJuridicaPropostaService.LOOKUP)
	private PessoaJuridicaPropostaService pessoaJuridicaPropostaService;

	@EJB(lookup = MensagemService.LOOKUP)
	private MensagemService messageService;

	@EJB(lookup = RelacaoCorrespondenteProponenteService.LOOKUP)
	private RelacaoCorrespondenteProponenteService relacaoCorrespondenteProponenteService;

	@EJB(lookup = JucemgSerasaService.LOOKUP)
	private JucemgSerasaService jucemgSerasaService;

	@EJB(lookup = ConstanteSistemaService.LOOKUP)
	private ConstanteSistemaService constanteSistemaService;

	@EJB(lookup = LimiteService.LOOKUP)
	private LimiteService limiteService;

	@EJB(lookup = FileService.LOOKUP)
	private FileService fileService;

	@EJB(lookup = EnquadramentoProdutoService.LOOKUP)
	private EnquadramentoProdutoService enquadramentoProdutoService;

	@EJB(lookup = AutenticacaoService.LOOKUP)
	private AutenticacaoService segurancaService;

	@EJB(lookup = TaxasService.LOOKUP)
	private TaxasService taxasService;

	@Inject
	private EnderecoService enderecoService;

	@EJB(lookup = EntidadeConveniadaService.LOOKUP)
	private EntidadeConveniadaService entidadeConveniadaService;

	@EJB(lookup = EmailService.LOOKUP)
	private EmailService emailService;

	@EJB(lookup = MensagemSistemaService.LOOKUP)
	private MensagemSistemaService mensagemSistemaService;

	@EJB(lookup = FileUtilService.LOOKUP)
	private FileUtilService fileUtilService;

	private static final String URL_RESULTADO_SIMULACAO = "/simulacao-financiamento/passo-1/";
	private static final String CONST_URL_APLICACAO = "URL_APLICACAO_DIGITAL";
	private static final String NOME_ANEXO = "Parcelas.pdf";

	@Inject
	private LogService logService;

	@GET
	@Secured(permissao = "concessao_credito:simular_financiamento")
	@Path("/recupera-lista-motivos-credito-autenticado/{cnpj-cli}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response recuperarListaMotivoCreditoAutenticado(@Context SecurityContext security, @PathParam("cnpj-cli") String cnpjCli) {
		final UsuarioJson usuarioJson = ((PrincipalDigital) security.getUserPrincipal()).getUsuario();
		final DominioJson dominioJson = usuarioJson.getDominio();
		final String cnpjDom = String.format("%014d", dominioJson.getCnpj());
		return Response.ok().entity(motivoCreditoService.recuperarMotivosCreditoAutenticado(usuarioJson.getId().longValue(), cnpjDom, cnpjCli)).build();
	}

	@GET
	@Secured(permissao = "concessao_credito:simular_financiamento")
	@Path("/buscar-empresa/{cnpj}")
	public Response buscarEmpresa(@Context SecurityContext security, @PathParam("cnpj") String cnpj) {
		UsuarioJson usuarioJson = ((PrincipalDigital) security.getUserPrincipal()).getUsuario();
		MessageBuilder<String> messageBuilder = new MessageBuilder<>();
		try {
			Object pessoa = jucemgSerasaService.consultarCnpjJucemgSerasa(cnpj, true);
			if (pessoa instanceof PessoaJuridicaJucemgTO) {
				messageBuilder.setDados(((PessoaJuridicaJucemgTO) pessoa).getDscRazaoSoc());
			} else {
				if (pessoa instanceof PessoaJuridicaSerasaTO) {
					messageBuilder.setDados(((PessoaJuridicaSerasaTO) pessoa).getNomRazaoSocial());
				}
			}
		} catch (NaoEncontradaJucemgSerasaException e) {
			messageBuilder.addMensagemErro(
					messageService.buscarMensagenPorCodigo(Constantes.Erro.MSG_CNPJ_NAO_ENCONTRADO_JUCEMG_SERASA).getDescricao());
			return Response.status(Status.INTERNAL_SERVER_ERROR).entity(messageBuilder.build()).build();
		}
		try {
			logService.gerarLogBdmgWeb(cnpj, null, null, "SIMULA", "buscarRazaoSocial",
					"[ETAPA]: CNPJ [Usu√°rio]: " + usuarioJson.getLogin().trim());
		} catch (gov.bdmg.cadastro.log.service.CampoObrigatorioInvalidosException_Exception | ConsultaSqlServiceException_Exception e) {
			e.printStackTrace();
		}
		return Response.status(Status.OK).entity(messageBuilder.build()).build();
	}

	@POST
	@Secured(permissao = "concessao_credito:simular_financiamento")
	@Path("/limite-potencial")
	@Produces(MediaType.APPLICATION_JSON)
	@TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED)
	public Response buscarLimiteProponente(@Context SecurityContext security, BuscarLimiteResource buscarLimiteResource) {
		UsuarioJson usuarioJson = ((PrincipalDigital) security.getUserPrincipal()).getUsuario();
		MessageBuilder<LimiteProponenteResource> messageBuilder = new MessageBuilder<>();
		int tamanhoCpfCnpj = usuarioJson.getDominio().getTipo().equals("J") ? 14 : 11;
		String cnpj = StringUtil.completarComEsquerda(usuarioJson.getDominio().getCnpj().toString(), tamanhoCpfCnpj, "0");
		if (segurancaService.possuiPermissaoDigital(usuarioJson, "concessao_credito:simular_financiamento_qualquer_cnpj")) {
			cnpj = buscarLimiteResource.getCnpj();
		}
		try {
			logService.gerarLogBdmgWeb(cnpj, null, null, "SIMULA", "buscarLimiteProponente",
					"[ETAPA]: LIMITE [Usu√°rio]: " + usuarioJson.getLogin().trim());
		} catch (gov.bdmg.cadastro.log.service.CampoObrigatorioInvalidosException_Exception | ConsultaSqlServiceException_Exception e) {
			e.printStackTrace();
		}

		PessoaJuridicaPropostaTo proponente = null;
		LimiteProponenteResource limiteProponenteResource = new LimiteProponenteResource();
		PropostaTo propostaTo = new PropostaTo();
		propostaTo.setProduto(new ProdutoMidiaTo());
		propostaTo.getProduto().setId(buscarLimiteResource.getCodigoProduto());

		if (buscarLimiteResource.getIdProponente() != null
				&& propostaService.buscarNumeroPropostaPorIdProponente(buscarLimiteResource.getIdProponente()) == null) {
			proponente = pessoaJuridicaPropostaService.buscarProponentesPorId(buscarLimiteResource.getIdProponente());
		}
		if (proponente == null) {
			try {
				proponente = pessoaJuridicaPropostaService.gerarProponente(cnpj);
			} catch (ImpedimentoGerarProponenteException e) {
				messageBuilder.addMensagemErro(e.getMessage());
				return Response.status(Status.INTERNAL_SERVER_ERROR).entity(messageBuilder.build()).build();
			}
		}
		if (proponente == null) {
			messageBuilder.addMensagemErro(messageService.buscarMensagenPorCodigo(Constantes.Erro.MSG_727).getDescricao());
			return Response.status(Status.INTERNAL_SERVER_ERROR).entity(messageBuilder.build()).build();
		}
		propostaTo.setProponente(proponente);
		limiteProponenteResource.setImpedimentos(impedimentoService.contemImpedimentoEmpresaPrimeiraEtapa(propostaTo, usuarioJson));
		if (!limiteProponenteResource.getImpedimentos().isEmpty()) {
			messageBuilder.setDados(limiteProponenteResource);
			return Response.status(Status.BAD_REQUEST).entity(messageBuilder.build()).build();
		}

		boolean precisaPreencherFaturamento = false;
		// Caso n√£o possuir faturamento
		if (proponente.getFaturamentos() == null || proponente.getFaturamentos().isEmpty()) {
			// Carrega faturamento
			proponente = limiteService.carregarFaturamento(proponente, usuarioJson, Constantes.Simulacao.PONTO_PROCESSO_SIMULACAO);
			// Mandar preencher
			if (limiteService.validaPreenchimentoManualFaturamento(proponente, usuarioJson,
					Constantes.Simulacao.PONTO_PROCESSO_SIMULACAO)) {
				limiteProponenteResource.setMotivoPreenchimentoManual(proponente.getMotivoPreenchimentoManual());
				limiteProponenteResource.setFaturamentoManual(true);
				precisaPreencherFaturamento = true;
			}
		}
		if (proponente.getFaturamentos() != null && !proponente.getFaturamentos().isEmpty() && !precisaPreencherFaturamento) {
			boolean faturamentoSef = "S".equals(proponente.getFaturamentosDaSEF());
			try {
				proponente.setFaturamentoAnualizado(processamentoService.calcularValorFaturamamentoAnualizado(proponente, faturamentoSef,
						Constantes.Simulacao.PONTO_PROCESSO_SIMULACAO));

				Double valorMaximoFaturamentoMpe = Double.valueOf(constanteSistemaService.buscarValorPorNome("VR_MAX_FATURAMENTO_MPE"));
				if (proponente.getFaturamentoAnualizado() != null) {
					if (proponente.getFaturamentoAnualizado().compareTo(BigDecimal.valueOf(valorMaximoFaturamentoMpe)) > 0) {
						limiteProponenteResource.getImpedimentos()
								.add(mensagemSistemaService.recuperarMensagemFormatadaPorCodigo("ES011_MSG015"));
						messageBuilder.setDados(limiteProponenteResource);
						return Response.status(Status.BAD_REQUEST).entity(messageBuilder.build()).build();
					}
				}

			} catch (BdmgBaseNegocioException e) {
				messageBuilder.addMensagemErro(e.getMessage());
				return Response.status(Status.INTERNAL_SERVER_ERROR).entity(messageBuilder.build()).build();
			}
			limiteProponenteResource = limiteService.buscarLimiteProponente(proponente, usuarioJson,
					Constantes.Simulacao.PONTO_PROCESSO_SIMULACAO);
			if (!limiteProponenteResource.getImpedimentos().isEmpty()) {
				messageBuilder.setDados(limiteProponenteResource);
				return Response.status(Status.BAD_REQUEST).entity(messageBuilder.build()).build();
			}
		}
		messageBuilder.setDados(limiteProponenteResource);
		if (proponente.getFaturamentos() == null) {
			proponente.setFaturamentos(new ArrayList<>());
		}
		messageBuilder.getDados().setIdProponente(pessoaJuridicaPropostaService.salvarRecuperarId(proponente));
		propostaTo.setProponente(proponente);
		limiteProponenteResource.setImpedimentos(impedimentoService.contemImpedimentoEmpresaPosCriacaoProponente(propostaTo, usuarioJson));
		if (!limiteProponenteResource.getImpedimentos().isEmpty()) {
			messageBuilder.setDados(limiteProponenteResource);
			return Response.status(Status.BAD_REQUEST).entity(messageBuilder.build()).build();
		}

		if (precisaPreencherFaturamento) {
			return Response.status(Status.NOT_FOUND).entity(messageBuilder.build()).build();
		} else {
			return Response.ok().entity(messageBuilder.build()).build();
		}
	}

	@GET
	@Path("/download/documento-autorizacao")
	@Produces(Constantes.MediaType.APPLICATION_PDF)
	public Response baixarAutorizacao() {
		String codigoArquivo = constanteSistemaService.buscarValorPorNome(Constantes.Simulacao.COD_ARQ_DOCUMENTO_DA_EMPRESA);
		try {
			FileIn input = new FileIn();
			input.setCodigo(Long.parseLong(codigoArquivo));
			FileOut output = fileService.getFileWS(input);
			return Response.status(Status.OK).entity(output.getConteudo())
					.header("Content-Disposition", "attachment; filename=autorizacao-consulta-proponente-bdmg.pdf").build();
		} catch (FileServiceException e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).entity("N√£o foi poss√≠vel encontrar o arquivo").build();
		}
	}

	@GET
	@Path("/documento-autorizacao")
	@Produces(MediaType.APPLICATION_JSON)
	public Response urlDownloadDocumentoAutorizacao() {
		MessageBuilder<String> messageBuilder = new MessageBuilder<>();
		messageBuilder.setDados(constanteSistemaService.buscarValorPorNome(Constantes.Simulacao.URL_ARQ_DOCUMENTO_DA_EMPRESA));
		return Response.status(Status.OK).entity(messageBuilder.build()).build();
	}

	@GET
	@Path("/download/passo-a-passo-cac")
	@Produces(Constantes.MediaType.APPLICATION_PDF)
	public Response baixarPassoAPassoCac() {
		String codigoArquivo = constanteSistemaService.buscarValorPorNome(Constantes.Simulacao.COD_PASSO_A_PASSO_COMPROVANTE_CAC);
		try {
			FileIn input = new FileIn();
			input.setCodigo(Long.parseLong(codigoArquivo));
			FileOut output = fileService.getFileWS(input);
			return Response.status(Status.OK).entity(output.getConteudo())
					.header("Content-Disposition", "attachment; filename=passo-a-passo-comprovante-e-CAC.pdf").build();
		} catch(FileServiceException e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).entity("N√£o foi poss√≠vel encontrar o arquivo").build();
		}
	}

	@POST
	@Path("/recupera-complemento-enquadramento")
	@Produces(MediaType.APPLICATION_JSON)
	public Response recuperaPessoaJuridicaJucemg(String cnpj) {
		try {
			final PessoaJuridicaJucemgTO pjj = this.jucemgSerasaService.recuperarPessoaJucemg(cnpj);
			final String razaoSocial = pjj.getDscRazaoSoc();
			final Municipio municipio = enderecoService.recuperarMunicipioPorCep(pjj.getNumEndCep());
			if (municipio == null || municipio.getCodigoIbge() == null) {
				throw new PessoaJuridicaNaoEncontradaException("Objeto municipio ou codigo IBGE est√° nulo.");
			}
			final boolean participacaoMajoritariaFeminina = participacaoMajoritariaFeminina(pjj);
			final String cnae = pjj.getCodAtivEconPrinCnae();
			final ComplementoEnquadramento ce = new ComplementoEnquadramento(razaoSocial, participacaoMajoritariaFeminina, municipio, cnae);
			return Response.ok(ce).build();
		} catch (PessoaJuridicaNaoEncontradaException e) {
			Logger.getLogger(getClass().getName()).fine(e.getMessage());
			return Response.status(Status.NOT_FOUND).entity(e.getMessage()).build();
		}
	}

	private boolean participacaoMajoritariaFeminina(PessoaJuridicaJucemgTO pjj) {
		BigDecimal totalCapital = BigDecimal.ZERO;
		BigDecimal capitalFeminino = BigDecimal.ZERO;
		boolean somenteSociosSexoFeminino = true;
		for (SocioAdminJucemgTO socio : pjj.getSocioAdminJucemgList()) {
			if (socio.getNumCpf() != null) {
				if (socio.getDscSexo() == null) {
					throw new PessoaJuridicaNaoEncontradaException("Sexo n√£o informado!.");
				}
				if ("F".equalsIgnoreCase(socio.getDscSexo())) {
					capitalFeminino = capitalFeminino.add(socio.getVrCapi());
				} else {
					somenteSociosSexoFeminino = false;
				}
			}
			totalCapital = totalCapital.add(socio.getVrCapi());
		}

		if (somenteSociosSexoFeminino) {
			return true;
		}

		if (BigDecimal.ZERO.compareTo(totalCapital) == 0) {
			return false;
		}
		return BigDecimal.valueOf(0.5).compareTo(capitalFeminino.divide(totalCapital, 5, RoundingMode.HALF_UP)) < 1;
	}

	@GET
	@Path("/recupera-lista-motivos-credito")
	@Produces(MediaType.APPLICATION_JSON)
	public Response recuperarListaMotivoCredito() {
		return Response.ok(this.motivoCreditoService.recuperarMotivosCreditoNaoAutenticado()).build();
	}

	@POST
	@Path("/recupera-lista-destinacao-motivos-credito")
	@Produces(MediaType.APPLICATION_JSON)
	public Response recuperarListaDestinacaoMotivoCredito(MotivoCreditoTo motivoCredito) {
		if (motivoCredito == null || motivoCredito.getTipo() == null || motivoCredito.getTipo().trim().length() != 1) {
			Response.status(Status.INTERNAL_SERVER_ERROR).entity("Motivo de cr√©dito nulo ou com tipo inv√°lido.");
		}
		final char codigoMotivoCredito = motivoCredito.getTipo().charAt(0);
		return Response.ok(this.motivoCreditoService.recuperarDestinacaoMotivosCredito(codigoMotivoCredito)).build();
	}

	@POST
	@Path("/cnpj-matriz-valido")
	@Produces(MediaType.APPLICATION_JSON)
	public Response cnpjMatrizValido(String cnpj) {
		return Response.ok(Boolean.valueOf(simulacaoFinanciamentoService.cnpjMatrizValido(cnpj))).build();
	}

	@GET
	@Path("/enquadrar-produto")
	@Produces(MediaType.APPLICATION_JSON)
	public Response enquadrarProduto(@QueryParam("cnpj") String cnpj, @QueryParam("motivoCredito") String tipoMotivoCredito,
			@QueryParam("municipio") Long idMunicipio, @QueryParam("valorSolicitado") BigDecimal valorSolicitado,
			@QueryParam("participacaoMajoritariaFeminina") Boolean participacaoMajoritariaFeminina, @QueryParam("cnae") String cnae,
			@QueryParam("faturamentoAnualId") Long faturamentoAnualId) {
		try {
			if (cnpj == null || cnpj.isEmpty() || tipoMotivoCredito == null || tipoMotivoCredito.isEmpty() || idMunicipio == null
					|| valorSolicitado == null) {
				return Response.status(Status.METHOD_NOT_ALLOWED).entity("Parametro informado inv√°lido").build();
			}

			final ProdutoEnquadradoTO produtoEnquadrado;
			produtoEnquadrado = enquadramentoProdutoService.enquadrar(cnpj, tipoMotivoCredito.charAt(0), idMunicipio, valorSolicitado,
					participacaoMajoritariaFeminina, cnae, "", 0L, faturamentoAnualId);
			return Response.status(Status.OK).entity(produtoEnquadrado).build();
		} catch (SemProdutoEnquadradoException e) {
			Logger.getLogger(getClass().getName()).severe(e.getMensagem());
			return Response.status(Status.NOT_FOUND).entity(e.getMensagem()).build();
		}
	}

	@GET
	@Path("/cidadesMinasGerais")
	@Produces(value = MediaType.APPLICATION_JSON)
	public Response recuperarTodasCidadesMinasGerais() {
		final UnidadeFederativa uf = new UnidadeFederativa();
		uf.setId("MG");
		final List<Municipio> municipios = enderecoService.recuperarListaMunicipiosPorUnidadeFederativa(uf);
		return Response.ok().entity(municipios).build();
	}

	/**
	 * Respons√°vel por realizar a simula√ß√£o de cr√©dito.
	 *
	 * @param simulacaoCreditoRequestVO
	 * @return
	 */
	@POST
	@Path("/executarSimulacao")
	@Produces(value = MediaType.APPLICATION_JSON)
	@Consumes(value = MediaType.APPLICATION_JSON)
	public Response executarSimulacao(ExecutarSimulacaoRequest request) {
		if (request.getMunicipio() == null || request.getMunicipio().getId() == null) {
			return Response.status(Status.METHOD_NOT_ALLOWED).entity("Par√¢metros informados inv√°lidos.").build();
		}
		return executarSimulacao(request, null);
	}

	/**
	 * Respons√°vel por realizar a simula√ß√£o de cr√©dito.
	 *
	 * @param simulacaoCreditoRequestVO
	 * @return
	 */
	@POST
	@Path("/executarSimulacaoAutenticado")
	@Secured
	@Produces(value = MediaType.APPLICATION_JSON)
	@Consumes(value = MediaType.APPLICATION_JSON)
	public Response executarSimulacao(@Context SecurityContext securityContext, ExecutarSimulacaoRequest request) {
		PrincipalDigital principalDigital = (PrincipalDigital) securityContext.getUserPrincipal();
		UsuarioJson usuarioJson = principalDigital.getUsuario();
		if (request.getIdProponente() == null || usuarioJson == null || usuarioJson.getLogin() == null) {
			return Response.status(Status.METHOD_NOT_ALLOWED).entity("Par√¢metros informados inv√°lidos.").build();
		}
		return executarSimulacao(request, usuarioJson);
	}

	public Response executarSimulacao(ExecutarSimulacaoRequest request, UsuarioJson usuarioJson) {

		if (request == null || request.getMotivoCredito() == null || request.getMotivoCredito().getTipo() == null
				|| ((usuarioJson == null || !usuarioJson.ehCorrespondente()) && request.getMotivoCredito() != null
						&& request.getMotivoCredito().getId().equals(1L) && request.getDestinacaoMotivoCredito() == null)
				|| request.getValorSolicitado() == null || request.getEmail() == null || request.getEmail().isEmpty()
				|| request.getCnpj() == null || request.getCnpj().isEmpty()) {
			return Response.status(Status.METHOD_NOT_ALLOWED).entity("Par√¢metros informados inv√°lidos.").build();
		}

		try {
			final String login = (usuarioJson != null) ? usuarioJson.getLogin() : "";
			final SimulacaoFinanciamentoTO simulacaoFinanciamento;
			if (!login.isEmpty()) {
				List<String> impedimentos = this.obterImpedimentosPreEnquadramento(request, usuarioJson);
				if (impedimentos != null && impedimentos.size() > 0) {
					return Response.status(Status.BAD_REQUEST).entity(new MessageBuilder<List>(impedimentos)).build();
				}

				simulacaoFinanciamento = this.simulacaoFinanciamentoService.executarSimulacaoLogado(
						request.getMotivoCredito().getTipo().charAt(0),
						request.getDestinacaoMotivoCredito() == null ? null : request.getDestinacaoMotivoCredito().getId(),
						request.getValorSolicitado().doubleValue(), request.getEmail(), request.isOptanteSimplesNacional(),
						request.getIdProponente(), request.getLimiteMinimoFinanciamento(), request.getLimiteMaximoFinanciamento(), login,
						request.getNome(), usuarioJson.getDominio().getCnpj());
			} else {
				simulacaoFinanciamento = this.simulacaoFinanciamentoService.executarSimulacaoDeslogado(
						request.getMotivoCredito().getTipo().charAt(0),
						(request.getDestinacaoMotivoCredito() == null ? null : request.getDestinacaoMotivoCredito().getId()),
						request.getValorSolicitado().doubleValue(), request.getEmail(), request.getCnpj(),
						request.isOptanteSimplesNacional(), Integer.parseInt(request.getMunicipio().getCodigoIbge()),
						request.isParticipacaoFeminina(), request.getCnae(), request.getNome(), request.getFaturamentoAnualId());
			}
			return Response.ok().entity(simulacaoFinanciamento).build();
		} catch (SemProdutoEnquadradoException e) {
			Logger.getLogger(getClass().getName()).fine(e.getMessage());
			return Response.status(Status.NOT_FOUND).entity(e.getMessage()).build();
		} catch (EJBTransactionRolledbackException e) {
			Logger.getLogger(getClass().getName()).severe(e.getMessage());
			return Response.status(Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()).build();
		}
	}

	@GET
	@Path("/calcula-cet-mensal")
	@Produces(value = MediaType.APPLICATION_JSON)
	public Response calculaCetMensal(@QueryParam("cetAnual") BigDecimal cetAnual) {
		final double cet = cetAnual.doubleValue();
		final double cetMensal = TaxaJuros.builder().setTaxa(cet).build().getTaxa(Frequencias.Mensal);
		return Response.ok().entity(BigDecimal.valueOf(cetMensal)).build();
	}

	/**
	 * Retorna as taxas e condicoes de capital de giro
	 *
	 * @return
	 */
	@GET
	@Path("/taxaCondicaoGiro")
	@Produces(value = MediaType.APPLICATION_JSON)
	@Consumes(value = MediaType.APPLICATION_JSON)
	public Response obterTaxasCapitalGiro() {
		try {
			return Response.ok().entity(taxasService.obterTaxasDeCapitalDeGiro()).build();
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()).build();
		}
	}

	@GET
	@Path("/url-listaCNAEsCriativa")
	@Produces(MediaType.APPLICATION_JSON)
	public Response urlListaCnaesCriativa() {
		MessageBuilder<String> messageBuilder = new MessageBuilder<>();
		messageBuilder.setDados(constanteSistemaService.buscarValorPorNome(Constantes.Simulacao.URL_ARQ_CNAES_CRIATIVA));
		return Response.status(Status.OK).entity(messageBuilder.build()).build();
	}

	/**
	 * Realiza a Impress√£o do Formul√°rio de Preenchimento Proposta
	 */
	@POST
	@Path("/impressaoPDFSimulacao")
	public Response impressaoPDFSimulacao(@Context HttpServletResponse response) {

		try {
			return Response.status(Status.OK).build();
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/recuperar10CorrespondentesProximos/{idMunicipio}")
	@Produces(value = MediaType.APPLICATION_JSON)
	@Consumes(value = MediaType.APPLICATION_JSON)
	public ResponseResource<CorrespondentesProximos> recuperarCorrespondente(@PathParam("idMunicipio") Long idMunicipio) {
		return new ResponseResource<>(
				new CorrespondentesProximos(entidadeConveniadaService.recuperarCorrespondentesProximos(idMunicipio, 20)));
	}

	@GET
	@Path("/recuperar-nota-risco/{codigoProduto}/{prazo}/{carencia}")
	@Produces(MediaType.TEXT_PLAIN)
	public Response recuperarNotaRisco(@PathParam("codigoProduto") Long codigoProdutoMidia, @PathParam("prazo") Integer prazo,
			@PathParam("carencia") Integer carencia) {
		CondicaoTo condicaoTo = condicaoService.buscarCondicaoPerfilPorProdutoMidiaPrazo(codigoProdutoMidia, prazo, carencia);
		return Response.ok(condicaoTo.getFlagPrecifPerfRisco()).build();
	}

	@Secured
	@POST
	@Path("/enviar-email-autenticado/{recaptcha}")
	@Consumes(value = MediaType.APPLICATION_JSON)
	@Produces(value = MediaType.APPLICATION_JSON)
	public Response enviarEmailAutenticado(@Context SecurityContext securityContext, @PathParam("recaptcha") String recaptcha,
			EnviarEmailRequest request) {
		PrincipalDigital principalDigital = (PrincipalDigital) securityContext.getUserPrincipal();
		UsuarioJson usuarioJson = principalDigital.getUsuario();
		DominioJson dominioJson = usuarioJson.getDominio();
		Boolean isCorrespondente = CollectionUtils.isNotEmpty(dominioJson.getGrupos()) && dominioJson.getGrupos().contains("GRP_CORRESP");
		return enviarEmail(request, recaptcha, isCorrespondente);
	}

	@POST
	@Path("/enviar-email/{recaptcha}")
	@Consumes(value = MediaType.APPLICATION_JSON)
	@Produces(value = MediaType.APPLICATION_JSON)
	public Response enviarEmail(@PathParam("recaptcha") String recaptcha, EnviarEmailRequest request) {
 		return enviarEmail(request, recaptcha, Boolean.FALSE);
	}

	public Response enviarEmail(EnviarEmailRequest request, String recaptcha, Boolean correspondenteBancario) {
		if (Recaptcha.validarCaptchaGoogle(recaptcha)) {
			if (EmailUtils.validarEmail(request.getEmail())) {
				Boolean templatePlanoSelecionado;
				String razaoSocial;
				if (request.getRazaoSocial() != null) {
					razaoSocial = request.getRazaoSocial();
				} else {
					razaoSocial = "";
				}
				String urlAplicacao = constanteSistemaService.buscarValorPorNome(CONST_URL_APLICACAO);
				String urlSimuleAgora = correspondenteBancario ? StringUtils.EMPTY
						: urlAplicacao + URL_RESULTADO_SIMULACAO + request.getIdSimulacao();
				String msgFaleComBDMG = mensagemSistemaService.recuperarMensagemPorCodigo("DIGIWEB005").getMensagemSistema().getDescricao();
				String msgOuvidoria = mensagemSistemaService.recuperarMensagemPorCodigo("DIGIWEB118").getMensagemSistema().getDescricao();
				Map<String, Object> context = new HashMap<>();
				StringEscapeUtils stringEscape = new StringEscapeUtils();
				String msgValorAFinanciar = mensagemSistemaService.recuperarMensagemPorCodigo("ES010_MSG001").getMensagemSistema()
						.getDescricao()
						.replace("{0}", MoedaUtils.formatarDecimalMonetario(request.getTarifaIof().multiply(BigDecimal.valueOf(100l))));
				String msgJurosCarencia = mensagemSistemaService.recuperarMensagemPorCodigo("ES010_MSG002").getMensagemSistema()
						.getDescricao();

				// Vari√°veis comuns
				context.put("obj", request);
				context.put("urlSimuleAgora", urlSimuleAgora);
				context.put("razaoSocial", razaoSocial);
				context.put("msgOuvidoria", msgOuvidoria);
				context.put("formatPercent", new NumerosUtils());
				context.put("formatCNPJ", new CNPJUtils());
				context.put("formatMoeda", new MoedaUtils());
				context.put("stringEscapeUtils", new StringEscapeUtils());
				context.put("msgResposta", StringEscapeUtils.escapeHtml4(
						mensagemSistemaService.recuperarMensagemPorCodigo("ES006_MSG005").getMensagemSistema().getDescricao()));
				context.put("msgValorParcelasAlteracao", StringEscapeUtils
						.escapeHtml4(mensagemSistemaService.recuperarMensagemPorCodigo("DIGIWEB015").getMensagemSistema().getDescricao()));
				context.put("msgValorAFinanciar", StringEscapeUtils.escapeHtml4(msgValorAFinanciar));
				context.put("msgJurosCarencia", StringEscapeUtils.escapeHtml4(msgJurosCarencia));

				if (request.getPlanoSelecionado() == null) {
					// Todos os planos
					templatePlanoSelecionado = false;
					List<PlanoPorPrazoResource> planosPorPrazoOrdenados = request.getPlanosPorPrazo().stream()
							.sorted((a, b) -> a.getPrazo().compareTo(b.getPrazo())).collect(Collectors.toList());

					planosPorPrazoOrdenados.forEach(element -> {
						List<PlanoResource> planosOrdenados = element.getPlanosResource().stream()
								.sorted((a, b) -> a.getCarencia().compareTo(b.getCarencia())).collect(Collectors.toList());
						element.getPlanosResource().clear();
						element.setPlanosResource(planosOrdenados);
					});

					Long menorCarencia = planosPorPrazoOrdenados.get(0).getCarencias().stream().sorted((a, b) -> a.compareTo(b)).findFirst()
							.orElse(0l);
					PlanoResource planoMenorPrazoSemCarencia = planosPorPrazoOrdenados.get(0).getPlanosResource().stream()
							.filter(t -> t.getCarencia().equals(menorCarencia)).collect(Collectors.toList()).get(0);
					request.getPlanosPorPrazo().clear();
					request.setPlanosPorPrazo(planosPorPrazoOrdenados);

					String msgDescricao = StringUtils.EMPTY;
					if (correspondenteBancario) {
						msgDescricao = mensagemSistemaService.recuperarMensagemPorCodigo("DIGIWEB117").getMensagemSistema().getDescricao();
					} else {
						msgDescricao = mensagemSistemaService.recuperarMensagemPorCodigo("DIGIWEB001").getMensagemSistema().getDescricao();
					}

					// Setando Flag de Precifica√ß√£o
					request.getPlanosPorPrazo().forEach(plano -> {
						CondicaoTo condicaoTo = condicaoService.buscarCondicaoPerfilPorProdutoMidiaPrazo(
								request.getProdutoEnquadrado().getCodigo().longValue(), plano.getPrazo().intValue(),
								plano.getCarencias().get(0).intValue());
						plano.setFlagPrecifPerfRisco(condicaoTo.getFlagPrecifPerfRisco().equals("S"));
					});

					// Vari√°veis (template todos os planos)
					context.put("exibirLogomarcaBdmg", correspondenteBancario ? SimNaoEnum.N.getCodigo() : SimNaoEnum.S.getCodigo());
					context.put("msgFaleComBDMG", !correspondenteBancario ? stringEscape.escapeHtml4(msgFaleComBDMG) : StringUtils.EMPTY);
					context.put("exibirEnderecoSiteBdmg", correspondenteBancario ? SimNaoEnum.N.getCodigo() : SimNaoEnum.S.getCodigo());
					context.put("valorAFinanciar", planoMenorPrazoSemCarencia.getValorAFinanciar());
					context.put("msgDescricao", StringEscapeUtils.escapeHtml4(msgDescricao));
					context.put("msgValorAFinanciar", StringEscapeUtils.escapeHtml4(msgValorAFinanciar));
					context.put("msgPrecificacao", StringEscapeUtils.escapeHtml4(
							mensagemSistemaService.recuperarMensagemPorCodigo("DIGIWEB014").getMensagemSistema().getDescricao()));

				} else {
					// Plano selecionado
					templatePlanoSelecionado = true;
					CondicaoTo condicaoTo = condicaoService.buscarCondicaoPerfilPorProdutoMidiaPrazo(
							request.getProdutoEnquadrado().getCodigo().longValue(), request.getPlanoSelecionado().getPrazo().intValue(),
							request.getPlanoSelecionado().getCarencia().intValue());
					Boolean jurosNotaRisco = condicaoTo.getFlagPrecifPerfRisco().equals("S");
					String msgValorParcelas = mensagemSistemaService.recuperarMensagemPorCodigo("DIGIWEB002").getMensagemSistema()
							.getDescricao()
							.replace("{0}",
									NumerosUtils.formatarDecimal(
											request.getPlanoSelecionado().getCetMensal().multiply(BigDecimal.valueOf(100l)).doubleValue())
											+ request.getPlanoSelecionado().getDescricaoTaxaVariavel())
							.replace("{1}",
									NumerosUtils.formatarDecimal(
											request.getPlanoSelecionado().getCetAnual().multiply(BigDecimal.valueOf(100l)).doubleValue())
											+ request.getPlanoSelecionado().getDescricaoTaxaVariavel());
					String msgFinanciaTarifas = mensagemSistemaService.recuperarMensagemPorCodigo("ES004_MSG001").getMensagemSistema()
							.getDescricao();

					String msgNaoFinanciaTarifas = mensagemSistemaService.recuperarMensagemPorCodigo("ES004_MSG002").getMensagemSistema()
							.getDescricao();

					if (request.getTarifaIof().doubleValue() > 0) {

						String msgIOF = mensagemSistemaService.recuperarMensagemPorCodigo("ES002_MSG010").getMensagemSistema()
									.getDescricao().replace("{0}",
									NumerosUtils.formatarDecimal(request.getTarifaIof().multiply(BigDecimal.valueOf(100l)).doubleValue()));

						msgFinanciaTarifas = msgFinanciaTarifas.concat(msgIOF);
						msgNaoFinanciaTarifas = msgNaoFinanciaTarifas.concat(msgIOF);

					}

					String msgSimuleAgora = mensagemSistemaService.recuperarMensagemPorCodigo("ES006_MSG004").getMensagemSistema()
							.getDescricao();
					String msgPrecificacao = mensagemSistemaService.recuperarMensagemPorCodigo("DIGIWEB014").getMensagemSistema()
							.getDescricao();

					Double valorParcela = request.getPlanoSelecionado().getParcelas()
							.get(request.getPlanoSelecionado().getCarencia().intValue()).getValor();

					// Vari√°veis (template plano selecionado)
					context.put("msgFaleComBDMG", stringEscape.escapeHtml4(msgFaleComBDMG));
					context.put("msgValorParcelas", stringEscape.escapeHtml4(msgValorParcelas));
					context.put("msgJurosCarencia", stringEscape.escapeHtml4(msgJurosCarencia));
					context.put("msgSimuleAgora", msgSimuleAgora);
					context.put("msgFinanciaTarifas", stringEscape.escapeHtml4(msgFinanciaTarifas));
					context.put("msgNaoFinanciaTarifas", stringEscape.escapeHtml4(msgNaoFinanciaTarifas));
					context.put("msgPrecificacao", stringEscape.escapeHtml4(msgPrecificacao));
					context.put("valorParcela", valorParcela);
					context.put("planoSelecionado", request.getPlanoSelecionado());
					context.put("jurosNotaRisco", jurosNotaRisco);
				}
				enviarEmailTodosPlanos(request.getEmail(), context, templatePlanoSelecionado);
				return Response.ok().build();
			} else {
				return Response.status(Status.BAD_REQUEST).build();
			}
		} else {
			return Response.status(Status.BAD_REQUEST).build();
		}
	}

	@GET
	@Path("/buscar-solicitacao/{idSimulacao}")
	@Produces(value = MediaType.APPLICATION_JSON)
	public Response buscarSolicitacao(@PathParam("idSimulacao") Long idSimulacao) {
		SolicitacaoFinanciamentoTo s = solicitacaoFinanciamentoService.buscarPorId(idSimulacao);
		return Response.status(Status.OK).entity(s).build();
	}

	@Secured
	@GET
	@Path("/download-formulario-preenchimento")
	@Produces(MediaType.APPLICATION_OCTET_STREAM)
	public Response baixarFormularioPreenchimento(@Context SecurityContext securityContext) {
		PrincipalDigital principalDigital = (PrincipalDigital) securityContext.getUserPrincipal();
		UsuarioJson usuarioJson = principalDigital.getUsuario();
		String codigoArquivo;
		if (usuarioJson.ehCliente()) {
			codigoArquivo = constanteSistemaService.buscarValorPorNome(Constantes.Simulacao.COD_ARQ_PREENCHIMENTO);
		} else {
			codigoArquivo = constanteSistemaService.buscarValorPorNome(Constantes.Simulacao.COD_ARQ_PREENCHIMENTO_CB);
		}
		try {
			FileIn input = new FileIn();
			input.setCodigo(Long.parseLong(codigoArquivo));
			FileOut output = fileService.getFileWS(input);
			return Response.status(Status.OK).entity(output.getConteudo())
					.header("Content-Disposition", "attachment; filename=Formul√°rio_Preenchimento.docx").build();
		} catch (FileServiceException e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).entity("N√£o foi poss√≠vel encontrar o arquivo").build();
		}
	}

	@GET
	@Path("/downloadCNAEsCriativa")
	@Produces(Constantes.MediaType.APPLICATION_PDF)
	public Response downloadCnaeCriativa() {
		String codigo = constanteSistemaService.buscarValorPorNome(Constantes.Simulacao.COD_ARQ_CNAES_CRIATIVA);
		try {
			FileIn input = new FileIn();
			input.setCodigo(Long.parseLong(codigo));
			FileOut output = fileService.getFileWS(input);
			return Response.status(Status.OK).entity(output.getConteudo())
					.header("Content-Disposition", "attachment; filename=lista-cnaes-criativa.pdf").build();
		} catch (FileServiceException e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).entity("Falha ao encontrar arquivo").build();
		}
	}

	@GET
	@Path("/downloadCNAEsCadastur")
	@Produces(Constantes.MediaType.APPLICATION_PDF)
	public Response downloadCnaeCadastur() {
		String codigo = constanteSistemaService.buscarValorPorNome(Constantes.Simulacao.COD_ARQ_CNAES_CADASTUR);
		try {
			FileIn input = new FileIn();
			input.setCodigo(Long.parseLong(codigo));
			FileOut output = fileService.getFileWS(input);
			return Response.status(Status.OK).entity(output.getConteudo())
					.header("Content-Disposition", "attachment; filename=lista-cnaes-cadastur.pdf").build();
		} catch (FileServiceException e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).entity("Falha ao encontrar arquivo").build();
		}
	}

	@GET
	@Path("validar-captcha/{recaptcha}")
	@Consumes(MediaType.TEXT_PLAIN)
	@Produces(MediaType.TEXT_PLAIN)
	public Response validarRecaptcha(@PathParam("recaptcha") String recaptcha) {
		return Response.status(Status.OK).entity(Recaptcha.validarCaptchaGoogle(recaptcha)).build();
	}

	private void enviarEmailTodosPlanos(String email, Map<String, Object> variaveis, Boolean template) {
		EmailSistemaBuilder emailSistemaBuilder = new EmailSistemaBuilder();
		try {
			if (template) {
				AnexoEmailSistema anexoEmailSistema = new AnexoEmailSistema();

				String assuntoPlanoSelecionado = mensagemSistemaService.recuperarMensagemPorCodigo("ES006_MSG003").getMensagemSistema()
						.getDescricao();
				// Setado o template que ser√° enviado em anexo aqui para recuperar o html e
				// gerar o pdf. Ser√° substitu√≠do abaixo.
				emailSistemaBuilder.setDestinatario(email).setHtml(true).setEmailPreDefinido(EmailPreDefinido.COMPOSICAO_PARCELAS)
						.setVariaveisEmail(variaveis).setAssunto(assuntoPlanoSelecionado);
				final EnviarEmailRequest enviarEmailRequest = (EnviarEmailRequest) variaveis.get("obj");
				enviarEmailRequest.setPlanosPorPrazo(enviarEmailRequest.getPlanosPorPrazo().stream().filter(planoPorPrazo -> {
					if (planoPorPrazo.getPrazo() != enviarEmailRequest.getPlanoSelecionado().getPrazo()) {
						return false;
					}
					planoPorPrazo.getPlanosResource().removeIf(
							planoResource -> planoResource.getCarencia() != enviarEmailRequest.getPlanoSelecionado().getCarencia());
					return true;
				}).collect(Collectors.toList()));
				String html = emailSistemaBuilder.retornarHtml();
				byte[] arquivo = fileUtilService.convertHtmlToPdf(html);

				// Setado o template que ir√° no corpo do email, substituindo o setado acima.
				emailSistemaBuilder.setEmailPreDefinido(EmailPreDefinido.PLANO_NAO_SELECIONADO_TEMPLATE);
				anexoEmailSistema.setArquivo(arquivo);
				anexoEmailSistema.setNome(NOME_ANEXO);
				emailSistemaBuilder.setAnexos(anexoEmailSistema);

			} else {
				AnexoEmailSistema anexoEmailSistema = new AnexoEmailSistema();
				String assuntoTodosPlanos = mensagemSistemaService.recuperarMensagemPorCodigo("ES006_MSG002").getMensagemSistema()
						.getDescricao();
				// Setado o template que ser√° enviado em anexo aqui para recuperar o html e
				// gerar o pdf. Ser√° substitu√≠do abaixo.
				emailSistemaBuilder.setDestinatario(email).setHtml(true).setEmailPreDefinido(EmailPreDefinido.COMPOSICAO_PARCELAS)
						.setVariaveisEmail(variaveis).setAssunto(assuntoTodosPlanos);

				String html = emailSistemaBuilder.retornarHtml();

				byte[] arquivo = fileUtilService.convertHtmlToPdf(html);
				// Setado o template que ir√° no corpo do email, substituindo o setado acima.
				emailSistemaBuilder.setEmailPreDefinido(EmailPreDefinido.PLANO_NAO_SELECIONADO_TEMPLATE);
				anexoEmailSistema.setArquivo(arquivo);
				anexoEmailSistema.setNome(NOME_ANEXO);
				emailSistemaBuilder.setAnexos(anexoEmailSistema);
			}

			emailService.gravarSolicitacaoEnvioEmail(emailSistemaBuilder.build());
		} catch (Exception e) {
			Logger.getLogger(this.getClass().getCanonicalName()).severe(e.getLocalizedMessage());
			e.printStackTrace();
		}
	}

	private List<String> obterImpedimentosPreEnquadramento(ExecutarSimulacaoRequest request, UsuarioJson usuarioJson) {
		char motivoCredito = request.getMotivoCredito().getTipo().charAt(0);
		Long idProponente = request.getIdProponente();
		BigDecimal limiteMaximo = request.getLimiteMaximoFinanciamento();
		return this.impedimentoService.contemImpedimentoPreEnquadramentoPorUsuarioDominioLogado(motivoCredito, idProponente, usuarioJson,
				limiteMaximo);
	}
}
